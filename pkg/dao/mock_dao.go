// Code generated by mockery v1.0.0. DO NOT EDIT.

// Generated

package dao

import apb "github.com/automationbroker/bundle-lib/bundle"
import mock "github.com/stretchr/testify/mock"

// MockDao is an autogenerated mock type for the Dao type
type MockDao struct {
	mock.Mock
}

// BatchDeleteSpecs provides a mock function with given fields: _a0
func (_m *MockDao) BatchDeleteSpecs(_a0 []*apb.Spec) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*apb.Spec) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BatchGetBundleInstances provides a mock function with given fields:
func (_m *MockDao) BatchGetBundleInstances() ([]*apb.ServiceInstance, error) {
	ret := _m.Called()

	var r0 []*apb.ServiceInstance
	if rf, ok := ret.Get(0).(func() []*apb.ServiceInstance); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*apb.ServiceInstance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetSpecs provides a mock function with given fields: _a0
func (_m *MockDao) BatchGetSpecs(_a0 string) ([]*apb.Spec, error) {
	ret := _m.Called(_a0)

	var r0 []*apb.Spec
	if rf, ok := ret.Get(0).(func(string) []*apb.Spec); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*apb.Spec)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchSetSpecs provides a mock function with given fields: _a0
func (_m *MockDao) BatchSetSpecs(_a0 apb.SpecManifest) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(apb.SpecManifest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBindInstance provides a mock function with given fields: _a0
func (_m *MockDao) DeleteBindInstance(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBinding provides a mock function with given fields: _a0, _a1
func (_m *MockDao) DeleteBinding(_a0 apb.BindInstance, _a1 apb.ServiceInstance) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(apb.BindInstance, apb.ServiceInstance) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteServiceInstance provides a mock function with given fields: _a0
func (_m *MockDao) DeleteServiceInstance(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSpec provides a mock function with given fields: _a0
func (_m *MockDao) DeleteSpec(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindJobStateByState provides a mock function with given fields: _a0
func (_m *MockDao) FindJobStateByState(_a0 apb.State) ([]apb.RecoverStatus, error) {
	ret := _m.Called(_a0)

	var r0 []apb.RecoverStatus
	if rf, ok := ret.Get(0).(func(apb.State) []apb.RecoverStatus); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]apb.RecoverStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(apb.State) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBindInstance provides a mock function with given fields: _a0
func (_m *MockDao) GetBindInstance(_a0 string) (*apb.BindInstance, error) {
	ret := _m.Called(_a0)

	var r0 *apb.BindInstance
	if rf, ok := ret.Get(0).(func(string) *apb.BindInstance); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apb.BindInstance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceInstance provides a mock function with given fields: _a0
func (_m *MockDao) GetServiceInstance(_a0 string) (*apb.ServiceInstance, error) {
	ret := _m.Called(_a0)

	var r0 *apb.ServiceInstance
	if rf, ok := ret.Get(0).(func(string) *apb.ServiceInstance); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apb.ServiceInstance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSpec provides a mock function with given fields: _a0
func (_m *MockDao) GetSpec(_a0 string) (*apb.Spec, error) {
	ret := _m.Called(_a0)

	var r0 *apb.Spec
	if rf, ok := ret.Get(0).(func(string) *apb.Spec); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apb.Spec)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetState provides a mock function with given fields: _a0, _a1
func (_m *MockDao) GetState(_a0 string, _a1 string) (apb.JobState, error) {
	ret := _m.Called(_a0, _a1)

	var r0 apb.JobState
	if rf, ok := ret.Get(0).(func(string, string) apb.JobState); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(apb.JobState)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStateByKey provides a mock function with given fields: key
func (_m *MockDao) GetStateByKey(key string) (apb.JobState, error) {
	ret := _m.Called(key)

	var r0 apb.JobState
	if rf, ok := ret.Get(0).(func(string) apb.JobState); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(apb.JobState)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSvcInstJobsByState provides a mock function with given fields: _a0, _a1
func (_m *MockDao) GetSvcInstJobsByState(_a0 string, _a1 apb.State) ([]apb.JobState, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []apb.JobState
	if rf, ok := ret.Get(0).(func(string, apb.State) []apb.JobState); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]apb.JobState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, apb.State) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsNotFoundError provides a mock function with given fields: err
func (_m *MockDao) IsNotFoundError(err error) bool {
	ret := _m.Called(err)

	var r0 bool
	if rf, ok := ret.Get(0).(func(error) bool); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SetBindInstance provides a mock function with given fields: _a0, _a1
func (_m *MockDao) SetBindInstance(_a0 string, _a1 *apb.BindInstance) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *apb.BindInstance) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetServiceInstance provides a mock function with given fields: _a0, _a1
func (_m *MockDao) SetServiceInstance(_a0 string, _a1 *apb.ServiceInstance) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *apb.ServiceInstance) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetSpec provides a mock function with given fields: _a0, _a1
func (_m *MockDao) SetSpec(_a0 string, _a1 *apb.Spec) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *apb.Spec) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetState provides a mock function with given fields: _a0, _a1
func (_m *MockDao) SetState(_a0 string, _a1 apb.JobState) (string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, apb.JobState) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, apb.JobState) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
